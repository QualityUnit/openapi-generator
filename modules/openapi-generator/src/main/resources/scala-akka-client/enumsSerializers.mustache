{{>licenseInfo}}
package {{apiPackage}}

{{#models.0}}
import {{modelPackage}}._
{{/models.0}}
import org.json4s._
import scala.reflect.ClassTag

object EnumsSerializers {

  def all: Seq[Serializer[_]] = Seq[Serializer[_]](){{#models}}{{#model}}{{#hasEnums}}{{#vars}}{{#isEnum}} :+
    new EnumNameSerializer({{classname}}Enum, {{classname}}Enums.fromString){{/isEnum}}{{/vars}}{{/hasEnums}}{{/model}}{{/models}}

  private class EnumNameSerializer[E <: ApiEnum: ClassTag](enum: E, deserializeMethod: String => {{classname}}Enum))
    extends Serializer[E] {
    import JsonDSL._

    val EnumerationClass: Class[E] = classOf[E]

    def deserialize(implicit format: Formats):  PartialFunction[(TypeInfo, JValue), E] = {
      case (TypeInfo(EnumerationClass, _), json) if isValid(json) =>
        json match {
          case JString(value) =>
            deserializeMethod(value)
          case value =>
            throw new MappingException(s"Can't convert $value to $EnumerationClass")
        }
    }

    def serialize(implicit format: Formats): PartialFunction[Any, JValue] = {
      case i: ApiEnum => i.value
    }
  }
}
