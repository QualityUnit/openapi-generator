{{>licenseInfo}}
package {{package}}

import {{mainPackage}}.core.ApiModel
import org.joda.time.DateTime
import java.util.UUID

{{#models}}
{{#model}}
case class {{classname}} (
  {{#vars}}
  {{#description}}
  /* {{{description}}} */
  {{/description}}
  {{{name}}}: {{^required}}Option[{{/required}}{{^isEnum}}{{dataType}}{{/isEnum}}{{#isEnum}}{{classname}}Enum{{/isEnum}}{{^required}}] = None{{/required}}{{#hasMore}},{{/hasMore}}
  {{/vars}}
) extends ApiModel

{{#hasEnums}}
sealed trait {{classname}}Enum extends ApiEnum

object {{classname}}Enums {
  {{#vars}}
  {{#isEnum}}
{{#_enum}}
    case object {{#fnEnumEntry}}{{.}}{{/fnEnumEntry}} extends {{classname}}Enum { val value = "{{.}}" }
{{/_enum}}

    def fromString(value: String): {{classname}}Enum = value match {
{{#_enum}}
      case "{{.}}" =>
        {{classname}}Enums.{{#fnEnumEntry}}{{.}}{{/fnEnumEntry}}
{{/_enum}}
      case unknown =>
        throw new MappingException(s"Can't convert $unknown to {{classname}}Enum")
    }
  {{/isEnum}}
  {{/vars}}
}
{{/hasEnums}}
{{/model}}
{{/models}}

